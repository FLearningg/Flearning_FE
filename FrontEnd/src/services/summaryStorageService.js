/**
 * Service ƒë·ªÉ qu·∫£n l√Ω l∆∞u tr·ªØ t√≥m t·∫Øt AI trong localStorage
 * Thay th·∫ø NodeCache ·ªü backend b·∫±ng localStorage ·ªü frontend
 */

const STORAGE_PREFIX = 'ai_summary_';
const CACHE_EXPIRY_HOURS = 72; // T√≥m t·∫Øt c√≥ hi·ªáu l·ª±c trong 3 ng√†y (72 gi·ªù)

/**
 * T·∫°o cache key t·ª´ material URL v√† lo·∫°i t√†i li·ªáu
 * @param {string} materialUrl - URL c·ªßa t√†i li·ªáu
 * @param {string} type - Lo·∫°i t√†i li·ªáu ('video' ho·∫∑c 'article')
 * @returns {string} Cache key
 */
const generateCacheKey = (materialUrl, type) => {
  // T·∫°o hash ƒë∆°n gi·∫£n t·ª´ URL ƒë·ªÉ l√†m key
  const hash = btoa(materialUrl).replace(/[^a-zA-Z0-9]/g, '').substring(0, 16);
  return `${STORAGE_PREFIX}${type}_${hash}`;
};

/**
 * Ki·ªÉm tra xem cache c√≥ h·∫øt h·∫°n kh√¥ng
 * @param {number} timestamp - Timestamp khi l∆∞u cache
 * @returns {boolean} True n·∫øu cache c√≤n hi·ªáu l·ª±c
 */
const isCacheValid = (timestamp) => {
  const now = Date.now();
  const expiryTime = CACHE_EXPIRY_HOURS * 60 * 60 * 1000; // Convert to milliseconds
  return (now - timestamp) < expiryTime;
};

/**
 * L∆∞u t√≥m t·∫Øt v√†o localStorage
 * @param {string} materialUrl - URL c·ªßa t√†i li·ªáu
 * @param {string} type - Lo·∫°i t√†i li·ªáu ('video' ho·∫∑c 'article')
 * @param {string} summary - N·ªôi dung t√≥m t·∫Øt
 * @param {Object} metadata - Th√¥ng tin metadata b·ªï sung
 */
export const saveSummaryToCache = (materialUrl, type, summary, metadata = {}) => {
  try {
    const cacheKey = generateCacheKey(materialUrl, type);
    const cacheData = {
      summary,
      materialUrl,
      type,
      timestamp: Date.now(),
      metadata: {
        ...metadata,
        cachedAt: new Date().toISOString(),
      }
    };
    
    localStorage.setItem(cacheKey, JSON.stringify(cacheData));
    console.log(`‚úÖ ƒê√£ l∆∞u t√≥m t·∫Øt ${type} v√†o localStorage:`, cacheKey);
    return true;
  } catch (error) {
    console.error('‚ùå L·ªói khi l∆∞u t√≥m t·∫Øt v√†o localStorage:', error);
    return false;
  }
};

/**
 * L·∫•y t√≥m t·∫Øt t·ª´ localStorage
 * @param {string} materialUrl - URL c·ªßa t√†i li·ªáu
 * @param {string} type - Lo·∫°i t√†i li·ªáu ('video' ho·∫∑c 'article')
 * @returns {Object|null} D·ªØ li·ªáu t√≥m t·∫Øt ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y/h·∫øt h·∫°n
 */
export const getSummaryFromCache = (materialUrl, type) => {
  try {
    const cacheKey = generateCacheKey(materialUrl, type);
    const cachedData = localStorage.getItem(cacheKey);
    
    if (!cachedData) {
      console.log(`üì≠ Kh√¥ng t√¨m th·∫•y cache cho ${type}:`, cacheKey);
      return null;
    }
    
    const parsedData = JSON.parse(cachedData);
    
    // Ki·ªÉm tra cache c√≥ h·∫øt h·∫°n kh√¥ng
    if (!isCacheValid(parsedData.timestamp)) {
      console.log(`‚è∞ Cache ƒë√£ h·∫øt h·∫°n cho ${type}:`, cacheKey);
      // X√≥a cache h·∫øt h·∫°n
      localStorage.removeItem(cacheKey);
      return null;
    }
    
    console.log(`‚úÖ T√¨m th·∫•y cache h·ª£p l·ªá cho ${type}:`, cacheKey);
    return parsedData;
  } catch (error) {
    console.error('‚ùå L·ªói khi ƒë·ªçc cache t·ª´ localStorage:', error);
    return null;
  }
};

/**
 * X√≥a t√≥m t·∫Øt kh·ªèi localStorage
 * @param {string} materialUrl - URL c·ªßa t√†i li·ªáu
 * @param {string} type - Lo·∫°i t√†i li·ªáu ('video' ho·∫∑c 'article')
 * @returns {boolean} True n·∫øu x√≥a th√†nh c√¥ng
 */
export const removeSummaryFromCache = (materialUrl, type) => {
  try {
    const cacheKey = generateCacheKey(materialUrl, type);
    localStorage.removeItem(cacheKey);
    console.log(`üóëÔ∏è ƒê√£ x√≥a cache cho ${type}:`, cacheKey);
    return true;
  } catch (error) {
    console.error('‚ùå L·ªói khi x√≥a cache:', error);
    return false;
  }
};

/**
 * X√≥a t·∫•t c·∫£ cache t√≥m t·∫Øt (d·ªçn d·∫πp)
 * @returns {number} S·ªë l∆∞·ª£ng cache ƒë√£ x√≥a
 */
export const clearAllSummaryCache = () => {
  try {
    let removedCount = 0;
    const keys = Object.keys(localStorage);
    
    keys.forEach(key => {
      if (key.startsWith(STORAGE_PREFIX)) {
        localStorage.removeItem(key);
        removedCount++;
      }
    });
    
    console.log(`üßπ ƒê√£ x√≥a ${removedCount} cache t√≥m t·∫Øt`);
    return removedCount;
  } catch (error) {
    console.error('‚ùå L·ªói khi x√≥a t·∫•t c·∫£ cache:', error);
    return 0;
  }
};

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ cache t√≥m t·∫Øt
 * @returns {Array} Danh s√°ch c√°c cache v·ªõi th√¥ng tin c∆° b·∫£n
 */
export const getAllSummaryCache = () => {
  try {
    const cacheList = [];
    const keys = Object.keys(localStorage);
    
    keys.forEach(key => {
      if (key.startsWith(STORAGE_PREFIX)) {
        try {
          const data = JSON.parse(localStorage.getItem(key));
          cacheList.push({
            key,
            type: data.type,
            materialUrl: data.materialUrl,
            timestamp: data.timestamp,
            isValid: isCacheValid(data.timestamp),
            cachedAt: data.metadata?.cachedAt,
          });
        } catch (error) {
          console.warn('‚ö†Ô∏è Cache kh√¥ng h·ª£p l·ªá:', key);
        }
      }
    });
    
    return cacheList;
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y danh s√°ch cache:', error);
    return [];
  }
};

/**
 * D·ªçn d·∫πp cache h·∫øt h·∫°n
 * @returns {number} S·ªë l∆∞·ª£ng cache h·∫øt h·∫°n ƒë√£ x√≥a
 */
export const cleanupExpiredCache = () => {
  try {
    let removedCount = 0;
    const keys = Object.keys(localStorage);
    
    keys.forEach(key => {
      if (key.startsWith(STORAGE_PREFIX)) {
        try {
          const data = JSON.parse(localStorage.getItem(key));
          if (!isCacheValid(data.timestamp)) {
            localStorage.removeItem(key);
            removedCount++;
          }
        } catch (error) {
          // X√≥a cache kh√¥ng h·ª£p l·ªá
          localStorage.removeItem(key);
          removedCount++;
        }
      }
    });
    
    if (removedCount > 0) {
      console.log(`üßπ ƒê√£ d·ªçn d·∫πp ${removedCount} cache h·∫øt h·∫°n`);
    }
    
    return removedCount;
  } catch (error) {
    console.error('‚ùå L·ªói khi d·ªçn d·∫πp cache:', error);
    return 0;
  }
};

// T·ª± ƒë·ªông d·ªçn d·∫πp cache h·∫øt h·∫°n khi load service
cleanupExpiredCache();
